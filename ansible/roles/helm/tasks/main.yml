---

- name: Configure kubectl using kops
  shell: "kops export kubecfg --name {{ cluster_name }} --state {{ state_store }}"
  
- name: Get initial helm status
  shell: helm --kube-context {{ cluster_name }} list
  register: helm_list_initial_status
  ignore_errors: true

- name: Download helm
  get_url:
    url: "{{ helm_url }}" 
    dest: "{{ helm_temp_directory }}/helm.tar.gz"
  when: helm_list_initial_status.failed

- name: Make helm directory
  file:
    path: "{{ helm_temp_directory }}/helm"
    state: directory
  when: helm_list_initial_status.failed

- name: Unarchive helm
  unarchive:
    copy: no
    src: "{{ helm_temp_directory }}/helm.tar.gz"
    dest: "{{ helm_temp_directory }}/helm"
  when: helm_list_initial_status.failed

- name: Copy helm to bin
  become: yes
  with_items:
    - helm
  copy:
    remote_src: true
    src: "{{ helm_temp_directory }}/helm/linux-amd64/helm"
    dest: "{{ helm_bin_dest }}"
    mode: ugo=rx
  when: helm_list_initial_status.failed

- name: Cleanup helm
  with_items:
    - "helm"
    - "helm.tar.gz"
  file:
    path: "{{ helm_temp_directory }}/{{item}}"
    state: absent
  when: helm_list_initial_status.failed

- name: Check helm status
  shell: helm --kube-context {{ cluster_name }} list
  register: helm_list_status
  ignore_errors: true
  when: helm_list_initial_status.failed

- name: Install helms client
  shell: "helm init --client-only"

- name: Install helm repos
  shell: |
    helm --kube-context {{ cluster_name }} repo add legion-helm {{ helm_repo }}
    helm --kube-context {{ cluster_name }} repo update

- name: Wait for helm ready
  shell: helm --kube-context {{ cluster_name }} ls
  register: helm_list_status_after_install
  until: helm_list_status_after_install.rc == 0
  retries: 20
  delay: 30
  ignore_errors: false
  when: helm_list_initial_status.failed
